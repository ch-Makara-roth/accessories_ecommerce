datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Added for credentials auth
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Otps          Otp[] // Relation to Otp model
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  userId    String?  @db.ObjectId // Optional: Link OTP to a user if they exist
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, otp]) // Ensure OTPs are unique per email for safety, though one active OTP per email is typical
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Float
  originalPrice Float?
  rating        Float     @default(0)
  reviewCount   Int?      @default(0)
  description   String
  image         String
  type          String?
  color         String?
  material      String?
  offer         String?
  tags          String[]  @default([])
  dataAiHint    String?
  stock         Int?      @default(0)
  status        String?   @default("Draft")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  category      Category? @relation(fields: [categoryId], references: [id], name: "ProductToCategory")
  categoryId    String?   @db.ObjectId
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[] @relation("ProductToCategory")
}
