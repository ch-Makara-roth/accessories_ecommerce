// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  price         Float
  originalPrice Float?
  rating        Float?    @default(0)
  reviewCount   Int?      @default(0)
  description   String
  image         String?
  type          String?
  color         String?
  material      String?
  offer         String?
  tags          String[]  @default([])
  dataAiHint    String?
  stock         Int?
  status        String?   @default("Draft") // e.g., Active, Draft, Archived, Scheduled
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  categoryId    String?   @db.ObjectId
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  orderItems OrderItem[] // Relation to OrderItem model

  @@map("accessorice-app") // Maps to the 'accessorice-app' collection
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]

  @@map("categories")
}

enum Role {
  CUSTOMER
  ADMIN
  SELLER
  STOCK
  DELIVERY // New role for delivery personnel
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]   // Relation to Order model
  otps     Otp[]     // Relation to Otp model
  @@map("User")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Added ID field
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  userId    String?  @db.ObjectId // Optional: link OTP to a user
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, otp]) // Ensure OTP is unique per email for active OTPs
  @@map("Otps")
}

enum OrderStatus {
  Pending
  Processing
  Shipped
  Delivered
  Cancelled
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  totalAmount     Float
  status          OrderStatus @default(Pending)
  shippingAddress Json? // Using Json for simplicity, can be structured further
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]

  @@map("Orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id]) // onDelete: Restrict or SetNull could be options
  quantity  Int
  price     Float // Price of the product at the time of order
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("OrderItems")
}

model AdminNotification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    String   // e.g., "New Order", "Low Stock", "User Registration"
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("AdminNotifications")
}
