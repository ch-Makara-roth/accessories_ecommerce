
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?   // For credentials provider
  otps          Otp[]     // Relation to Otp model

  @@map("User") // Explicitly map to "User" collection
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account") // Explicitly map to "Account" collection
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session") // Explicitly map to "Session" collection
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationToken") // Explicitly map to "VerificationToken" collection
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  userId    String?  @db.ObjectId // Optional: Link OTP to a user if they exist
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade) // Optional relation

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, otp]) // Ensure OTPs are unique per email
  @@map("Otp") // Explicitly map to "Otp" collection
}

model Product {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  originalPrice  Float?
  rating         Float     @default(0)
  reviewCount    Int?      @default(0)
  description    String
  image          String?
  type           String?
  color          String?
  material       String?
  offer          String?
  tags           String[]
  dataAiHint     String?
  stock          Int?
  status         String?   @default("Draft") // Default status to "Draft"
  categoryId     String?   @db.ObjectId // Foreign key for the relation
  category       Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull) // The relation
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("accessorice-app") // Maps to the 'accessorice-app' collection for products
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  slug      String   @unique
  products  Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories") // Explicitly map to "categories" collection
}
