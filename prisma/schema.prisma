
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String? // Added for credentials auth
  accounts      Account[]
  sessions      Session[]
  orders        Order[]   // Relation to Order model
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  otps          Otp[] // Relation to Otp model

  @@map("User")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("Account")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("Session")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId // Added this line
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("VerificationTokens")
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  userId    String?  @db.ObjectId // Optional: Link OTP to a user if they exist
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, otp]) // Ensure OTP is unique per email, or just unique globally if preferred
  @@map("Otp")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  slug      String    @unique
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id              String       @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  price           Float
  originalPrice   Float?
  image           String?
  stock           Int?
  status          String?      @default("Draft") // e.g., Active, Draft, Archived
  rating          Float?       @default(0)
  reviewCount     Int?         @default(0)
  type            String? // e.g., "Wireless", "Wired"
  color           String?
  material        String?
  offer           String? // e.g., "50% Off"
  tags            String[]     @default([])
  dataAiHint      String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  categoryId      String?      @db.ObjectId // Foreign key for the relation
  category        Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull) // The relation
  orderItems      OrderItem[]  // Relation to OrderItem model

  @@map("accessorice-app")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalAmount     Float
  status          String // e.g., Pending, Processing, Shipped, Delivered, Cancelled
  shippingAddress Json? // Or define a separate model/embedded document for address
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  orderItems      OrderItem[]

  @@map("Orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Restrict) // Restrict deletion of product if it's in an order
  quantity  Int
  price     Float // Price of the product at the time of order

  @@map("OrderItems")
}
